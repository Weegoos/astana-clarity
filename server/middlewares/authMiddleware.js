import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config();

const authMiddleware = (req, res, next) => {
    const authHeader = req.header("Authorization");
    console.log("üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization:", authHeader);

    if (!authHeader) {
        return res.status(401).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç." });
    }

    const token = authHeader.split(" ")[1]; // –ë–µ—Ä–µ–º —Å–∞–º —Ç–æ–∫–µ–Ω –±–µ–∑ "Bearer"

    if (!token) {
        return res.status(401).json({ message: "–§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π." });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", decoded);
        req.user = decoded; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ `req.user`
        next();
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error);
        return res.status(403).json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω." });
    }
};

export default authMiddleware;